# -*- coding: utf-8 -*-
"""How does a bike-share navigate speedy success.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5acnPG1iznAD9bGM3UzQPVqFIaa-QAq

Problem Statement:
>How do annual members and casual riders use Cyclistic bikes differently?
"""

import pandas as pd
import numpy as np
import datetime

q1_2019 = pd.read_csv('/content/Divvy_Trips_2019_Q1.csv')
q1_2020 = pd.read_csv('/content/Divvy_Trips_2020_Q1.csv')

# changing the column names to match that of 2020 Qurter 1
q1_2019 = q1_2019.rename(columns={
    "trip_id": "ride_id",
    "bikeid": "rideable_type",
    "start_time": "started_at",
    "end_time": "ended_at",
    "from_station_name": "start_station_name",
    "from_station_id": "start_station_id",
    "to_station_name": "end_station_name",
    "to_station_id": "end_station_id",
    "usertype": "member_casual"
})

#ride_id, rideable_type to character
q1_2019['ride_id'] = q1_2019['ride_id'].astype(str)
q1_2019['rideable_type'] = q1_2019['rideable_type'].astype(str)

# making a single dataframe
all_trips = pd.concat([q1_2019, q1_2020],ignore_index=True)

#removing unnecessary columns
all_trips = all_trips.drop(columns = ["start_lat", "start_lng", "end_lat", "end_lng", "birthyear", "gender", "tripduration"])

#consolidating the data
all_trips['member_casual'].replace({"Subscriber": "member", "Customer": "casual"}, inplace=True)

# creating date-related column
all_trips["date"] = pd.to_datetime(all_trips["started_at"]).dt.date
all_trips["month"] = pd.to_datetime(all_trips["date"]).dt.month
all_trips["day"] = pd.to_datetime(all_trips["date"]).dt.day
all_trips["year"] = pd.to_datetime(all_trips["date"]).dt.year
all_trips["day_of_week"] = pd.to_datetime(all_trips["date"]).dt.day_name()

all_trips

# calculating ride_length in seconds
all_trips["started_at"] = pd.to_datetime(all_trips["started_at"])
all_trips["ended_at"] = pd.to_datetime(all_trips["ended_at"])
all_trips["ride_length"] = (all_trips["ended_at"] - all_trips["started_at"]).dt.total_seconds()

all_trips.head()

# removing bad data
all_trips_v2 = all_trips[(all_trips["start_station_name"] != "HQ QR") & (all_trips["ride_length"] >= 0)].copy()

# Descriptive analysis on ride_length
print("Mean of ride_length in seconds : ", all_trips_v2['ride_length'].mean(),"seconds")
print("Median of ride_length in seconds : ", all_trips_v2['ride_length'].median(),"seconds")
print("Max of ride_length in seconds : ", all_trips_v2['ride_length'].max(),"seconds")
print("Min of ride_length in seconds : ", all_trips_v2['ride_length'].min(),"seconds")

# comparing caual and member
print("Mean : ",all_trips_v2.groupby('member_casual')['ride_length'].mean())
print("Median : ",all_trips_v2.groupby('member_casual')['ride_length'].median())
print("Max : ",all_trips_v2.groupby('member_casual')['ride_length'].max())
print("Min : ",all_trips_v2.groupby('member_casual')['ride_length'].min())

# Aggregate data for visualization
counts = all_trips_v2.groupby(["member_casual", "day_of_week"]).agg(
    number_of_rides=pd.NamedAgg(column='ride_id', aggfunc='count'),
    average_duration=pd.NamedAgg(column='ride_length', aggfunc='mean')
).reset_index()

# Visualizing
import seaborn as sns
import matplotlib.pyplot as plt

# number of rides by rider type
sns.barplot(x = "day_of_week", y = "number_of_rides", hue = "member_casual", data = counts)
plt.title("Number of Rides by Rider Type")
plt.show()

# average duration
sns.barplot(x = "day_of_week", y = "average_duration", hue = "member_casual", data = counts)
plt.title('average duration by rider type')
plt.show()

# Export summary file for further analysis
counts.to_csv('avg_ride_length.csv', index=False)

